package com.baisi.spedometer.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.baisi.spedometer.step.bean.StepData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_DATA".
*/
public class StepDataDao extends AbstractDao<StepData, Long> {

    public static final String TABLENAME = "STEP_DATA";

    /**
     * Properties of entity StepData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Step = new Property(1, int.class, "step", false, "STEP");
        public final static Property StepSecond = new Property(2, int.class, "stepSecond", false, "STEP_SECOND");
        public final static Property StepTime = new Property(3, java.util.Date.class, "stepTime", false, "STEP_TIME");
        public final static Property StepToday = new Property(4, String.class, "stepToday", false, "STEP_TODAY");
        public final static Property Reset = new Property(5, String.class, "reset", false, "RESET");
    }


    public StepDataDao(DaoConfig config) {
        super(config);
    }
    
    public StepDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STEP\" INTEGER NOT NULL ," + // 1: step
                "\"STEP_SECOND\" INTEGER NOT NULL ," + // 2: stepSecond
                "\"STEP_TIME\" INTEGER NOT NULL ," + // 3: stepTime
                "\"STEP_TODAY\" TEXT NOT NULL ," + // 4: stepToday
                "\"RESET\" TEXT NOT NULL );"); // 5: reset
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStep());
        stmt.bindLong(3, entity.getStepSecond());
        stmt.bindLong(4, entity.getStepTime().getTime());
        stmt.bindString(5, entity.getStepToday());
        stmt.bindString(6, entity.getReset());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStep());
        stmt.bindLong(3, entity.getStepSecond());
        stmt.bindLong(4, entity.getStepTime().getTime());
        stmt.bindString(5, entity.getStepToday());
        stmt.bindString(6, entity.getReset());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StepData readEntity(Cursor cursor, int offset) {
        StepData entity = new StepData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // step
            cursor.getInt(offset + 2), // stepSecond
            new java.util.Date(cursor.getLong(offset + 3)), // stepTime
            cursor.getString(offset + 4), // stepToday
            cursor.getString(offset + 5) // reset
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStep(cursor.getInt(offset + 1));
        entity.setStepSecond(cursor.getInt(offset + 2));
        entity.setStepTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setStepToday(cursor.getString(offset + 4));
        entity.setReset(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
